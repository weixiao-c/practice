PFCForest* initForest(){  //PFC编码森林初始化
PFCForest* forest = new PFCForest;  //首先创建空森林，然后
for( int i = 0; i<N_CHAR; i++ ) {  //对每一个可打印字符[0x20, 0x80)
  forest->insert (i, new PFCTree() ); //创建一棵对应的PFC编码树，初始时其中
  ( *forest ) [i]->insertAsRoot ( 0x20 + i); //只包含对应的一个（叶，根）节点
}
return forest; //返回包含N_CHAR棵树的森林，其中每棵树各包含一个字符
}

//构造PFC编码树
PFCTree* generateTree ( PFCForest* forest) { //
  strand(( unsigned int ) time (NULL)); //这里将随机取树合并，故先设置随机种子
  while ( 1 < forest->size() ) {
    PFCTree* s = new PFCTree;
    s->insertAsRoot('^');  //创建新树(根标记为"^")
    Rank r1 = rand() % forest->size();  //随机选取r1,且
    s->attachAsLC(s->root(), (*forest)[r1]); //作为左子树接入后
    forest->remove(r1); //随即删除
    Rank r2 = rand()%forest->size(); //随机选取r2, 且
    s->attachAsRC ( s->root(), (*forest)[r2]) //作为右子树接入后
    forest->remove(r2); //随机删除
    forest->insert(forest->size(),s);//合并后的PFC 树重新植入PFC森林
  }
  return (*forest) [0]; //至此，森林中尚存的最后一棵树，即全局PFC编码树
 }
