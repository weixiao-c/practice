#define BinNodeposi(T) BinNode<T>* //节点位置
#define stature(p) ((p) ? (p)->height : -1) //节点高度（与”空树高度为-1“的约定相统一）
typedef enum { RB_RED, RB_BLACK } RBColor; //节点颜色

template <typename T> struct BinNode{ //二叉树节点模版类 BinNode
//成员（为简化描述起见统一开放）
T data; //数值
BinNodePosi(T) parent; BinNodePosi(T) lc; BinNodePosi(T) rc; //父节点及左右汉子
int height;  //高度（通用）
int npl;  //NULL path Length (左式堆，也可直接用height代替)
RBColor color; //颜色（红黑树）
//构造函数
BinNode(): 
  parent(NULL), lc(NULL), rc(NULL), height(0), npl(1), color(RB_RED) {}
BinNode( T e, BinNodePosi(T) p = NULL, BinNodePosi(T) lc = NULL, BinNodePosi(T) rc = NULL,
         int h = 0, int l = 1, RBColor c = RB_RED) :
  data(e), parent(p), lc(lc), rc(rc), height(h), npl(l), color(c) {}
//操作接口
int size(); //统计当前节点后代总数，亦即以其为根的子树的规模
BinNodePosi(T) insertAsLC(T const& ); //作为当前节点的左孩子插入新节点
BinNodePosi(T) insertAsRC(T const& ); //作为当前节点的右孩子插入新节点
BinNodeposi(T) succ(); //取当前节点的直接后继
template <typename VST> void tracLevel (VST&); //子树层次遍历
template <typename VST> void travPre (VST&); //子树先序遍历
template <typename VST> void travIn (VST&); //子树中序遍历
template <typename VST> void travPost (VST&); //子树后序遍历
//比较器、判等器（各列其一，其余自行补充）
bool operateo< (BinNode const& bn) {return data < bn.data; } //小于
bool operator== (BinNode const& bn) {return date == bn.data; )//等于
};

